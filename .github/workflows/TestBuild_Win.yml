name: CI Pipeline Win

on:
  push:
    branches:
      - main


  
jobs:
  # test:
  #   name: Run Unit Tests
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: Set up .NET
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: '8.x'  # Specify the .NET version you're using
  #     - name: Restore dependencies
  #       run: dotnet restore ToDo-backend.csproj
  #     - name: Run unit tests
  #       run: dotnet test ToDo-backend.csproj
  #       # Replace with your actual test project path

  # sonarqube:
  #   name: SonarQube Analysis
  #   runs-on: windows-latest
  #   needs: test  # This job will run only after the `test` job has completed successfully
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #     - name: Cache SonarQube packages
  #       uses: actions/cache@v1
  #       with:
  #         path: ~\sonar\cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar
  #     - name: Cache SonarQube scanner
  #       id: cache-sonar-scanner
  #       uses: actions/cache@v1
  #       with:
  #         path: .\.sonar\scanner
  #         key: ${{ runner.os }}-sonar-scanner
  #         restore-keys: ${{ runner.os }}-sonar-scanner
  #     - name: Install SonarQube scanner
  #       if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
  #       shell: powershell
  #       run: |
  #         New-Item -Path .\.sonar\scanner -ItemType Directory
  #         dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
  #     - name: Build and analyze
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #       shell: powershell
  #       run: |
  #         .\.sonar\scanner\dotnet-sonarscanner begin /k:"ToDo-backend" /d:sonar.scanner.scanAll=false /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
  #         dotnet build ToDo-backend.csproj
  #         .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"


  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.build_pus_image.outputs.output1 }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build, Tag and push Docker image
        id: build_pus_image
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:github-${{ github.sha }}"
          echo "Generated image tag: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "output1=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
      - name: Debug Docker Job
        run: |
          echo "Output image tag: ${{ steps.build_pus_image.outputs.output1 }}"

  update-deployment:
    name: Update Deployment YAML
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Debug - Check Image Tag
        run: |
          echo "Received image tag: ${{ needs.docker.outputs.output1 }}"
      - name: Checkout Public Repo
        uses: actions/checkout@v2
        with:
          repository: Mohammed-Alhuraibi/deployment_test
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Debug - Before Update
        run: |
          echo "Current content of deployment.yaml:"
          cat deployment.yaml
          echo "Image tag to be used: ${{ needs.docker.outputs.output1 }}"
      - name: Update deployment.yaml
        run: |
          sed -i "s|image: .*$|image: ${{ needs.docker.outputs.output1 }}|" deployment.yaml
      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add deployment.yaml
          git commit -m "Update deployment image to ${{ needs.docker.outputs.output1 }}"
          git push
  job2:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - env:
          OUTPUT1: ${{needs.docker.outputs.output1}}
        run: echo "$OUTPUT1"
