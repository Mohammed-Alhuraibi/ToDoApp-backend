name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  # test:
  #   name: Run Unit Tests
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: Set up .NET
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: '8.x'  # Specify the .NET version you're using
  #     - name: Restore dependencies
  #       run: dotnet restore ToDo-backend.csproj
  #     - name: Run unit tests
  #       run: dotnet test ToDo-backend.csproj
  #       # Replace with your actual test project path

  # sonarqube:
  #   name: SonarQube Analysis
  #   runs-on: windows-latest
  #   needs: test  # This job will run only after the `test` job has completed successfully
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #     - name: Cache SonarQube packages
  #       uses: actions/cache@v1
  #       with:
  #         path: ~\sonar\cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar
  #     - name: Cache SonarQube scanner
  #       id: cache-sonar-scanner
  #       uses: actions/cache@v1
  #       with:
  #         path: .\.sonar\scanner
  #         key: ${{ runner.os }}-sonar-scanner
  #         restore-keys: ${{ runner.os }}-sonar-scanner
  #     - name: Install SonarQube scanner
  #       if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
  #       shell: powershell
  #       run: |
  #         New-Item -Path .\.sonar\scanner -ItemType Directory
  #         dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
  #     - name: Build and analyze
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #       shell: powershell
  #       run: |
  #         .\.sonar\scanner\dotnet-sonarscanner begin /k:"ToDo-backend" /d:sonar.scanner.scanAll=false /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
  #         dotnet build ToDo-backend.csproj
  #         .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"


  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    # needs: sonarqube
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-cache
          restore-keys: |
            ${{ runner.os }}-buildx-cache

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        id: build
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:build .

      - name: Upload Docker image as an artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ${{ github.workspace }}

  tag_and_push:
    name: Tag and Push Docker Image
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Retrieve and increment tag number
        id: get-tag
        run: |
          if [ -f incremented_tag.txt ]; then
            TAG=$(cat incremented_tag.txt)
            TAG=$((TAG + 1))
          else
            TAG=1
          fi
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo $TAG > incremented_tag.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push Docker image
        if: needs.docker.result == 'success'
        run: |
          docker tag ${{ env.IMAGE_NAME }}:build ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Upload incremented tag as artifact
        uses: actions/upload-artifact@v3
        with:
          name: incremented-tag
          path: incremented_tag.txt
